After downloading git on your computer, type:
1. git --version         (to check the version)
2. git -- help            ( to use the help table)

TO CONFIGURE IT FOR THE FIRST TIME
3. git config --global user-name        (my user-name = omaschidollars)
4. git config --global user-email       (my user-email = omaxxdons@gmail.com) 
5. git config --list       (check if the if the configuration is set correctly, it will display
                            the user-name and user-email you specified on-top)
6. pwd          (present working directory)
7. mkdir folder-name  (creates a folder in your computer,where you can create your repositories)
8. cd directory name   (change to the Repository folder you just made)

NOW YOU CAN CREATE REPOSITORIES ON THE REPOSITORY FOLDER
9. mkdir new-folder-name
10. cd new-folder-name
11. pwd
12. git  init  {this will initialize empty git repository in the C drive of your computer}
            {the name of the repository is .git ( c:users/oma/folder name/newfolder name/.git/)}
   WHENEVER A GIT REPOSITORY IS CREATED FOR THE FIRST TIME, IT CREATE A DEFAULT BRANCH CALL MASTER
13. touch filename.txt   (create filename.txt) 
14. notepad filename.txt ( it will open a notepad, you can write on it and save it)
15. git status ( it shows you that on branch master, no commit yet UNTRACKED FILES)
16. git add filename (it includes it to what'll be committted and filename.txt will appear in red)
          (nothing added to commit but untracked files present )
16b. git add  (it is use to track)
16c. git add. (git add all the files that have not been added to the repository) or 
     git add new filename .txt (this will only add new filename .txt)
    WITH THIS GIT WILL START TRACKING FILE OR FILES THAT ARE ADDED, THE COLOR WILL CHANGE TO GREEN
17. git status (it will show you the file that you just added, the color will be green, new file)
    THIS MEANS IT'S BEEN TRACKED BY GIT. BUT NO COMMIT YET
    IF YOU WANT TO UNSTAGE IT USE git rm --cached filename
18. git commit -m   "message"   (commit the file to the repository) commit means stage

19. git status (shows there's nothing to commit on branch master, you are working on clean tree) 
20. git log (it will display the commit ash tag, author, date and comment (message))


   YOU CAN CREATE MORE NEW FILES INTO THE REPOSITORY
1. touch filename2.txt
2. notepad filename2.txt

   YOU CAN OPEN THE OLD FILE AND WRITE ON IT AND SAVE THE CHANGES
1. notepad filename2.txt
2. git status (it'll display the modified filename.txt and filename2.txt files you just created) 
   (it'll inform you that you have one or more file which is untracked)
3. git add.
4. git status  (it'll display both the modified filename.txt and new file filename2.txt)
5. git commit -m "message"
6. git log (it will show you the information of both commits)

  NONE OF THE ABOVE HAVE BEEN COMMITED TO GITHUB YET
  TO COMMIT TO GITHUB, OPEN A GITHUB ACCOUNT AND SIGN IN
  CREATE A NEW REPOSITORY IN YOUR GITHUB (SERVER)
  IT IS BETTER TO CREATE THIS REPOSITORY WITH THESAME NAME THAT YOU USE IN YOUR LOCAL REPOSITORY
  SO THAT IT WILL SERVE AS A PLACE HOLDER FOR YOUR LOCAL REPOSITORY. SO WHEN YOU PUSH YOUR
  REPOSITORY FROM THE LOCAL REPO IT'LL GO AHEAD AND CRAETE ON THE SERVER (GITHUB).

         
            CREATE A REPOSITORY ON GITHUB
1. Click on the plus (+) sign on the top right corner
2. click on new repository and type the repository name and type the repository Description
    
   You can add a READme file, but if you already have a file in your local Repo, you can ignor it
   because you've content in your local repo and all you need is a place holder in Github(server).

3. click create Repository
   It will show instructions of what you can do and also display https and ssh url
   if you don't have any ssh key setup, you can use https 

   CREATE NEW REPO ON COMMAND LINE
   These are the commands displayed 
   echo newfolder-name >> README.md
   git init 
   git add README.md
   git commit -m "first commit"
   git remote add add origin https://github.com/omaschidollars/newfolder name.git
   git push -u origin master  

   PUSH AN EXISTING REPOSITORY FROM THE COMMAND LINE
   git remote add origin  https://github.com/omaschidollars/newfolder name.git

4. After creating the repository on github
   copy the url from git hub to your cli  or (gitbash)
   git remote add origin https://github.com/omaschidollars/newfolder name.git 
5. git remote -v  (it is use to check if you add correctly)
                   (it'll display two url fetch  and push)
6. git push -u origin master (it's use to link the upstream. push the local repo to github )
   (link the master branch of my local repository to the master branch of my github repository)
    (it will ask you for your github server credentials)

     TO USE SSH URL SSH CONFIGURATION THAT'S REQUIRED FOR CREATING SSH KEY
     YOU MUST FIRST CREATE A PAIR OF SSH KEYS (PUBLIC AND PRIVATE KEYS)
     TO CREATE THE KEYS TYPE:
1. ssh-keygen -t rsa -C omaxxxodons@gmail.com  ( -C must be in CAPITAL LETTER) this'll display
    Generating public/private rsa key pair
2. Enter file in which to save the key ( /C/users/omasa/.ssh/id_rsa)
   (By default it is created in the user home directory)
3. click yes if you like that directory
4. enter passphrase (empty for no passphrase)
   enter same passphrase again
   (Bear it in mind, you must remember the passphrase, you'll need it to authenticate yourself
    using the ssh mechanism)
   Go and check the specified folder where the keys are created  and you'll see the public and
   private keys that you created
5. open the public key and copy the content of the whole file 
   inpute it into the server, so that you can authenticate yourself in
   click the last drop down on the top right 
   click settings
   click ssh ans GPG keys
   click on new ssh keys
   Paste the public key that you copied
   click add ssh key
   it will prompt you for your password   (put in your password)
6. ssh -T git@github.com (To check if your ssh keys are working well)
   it will display:
   The authenticity of host github.com (IP) cant be establish 
   RSA key fingerprint is SHA256
   Are you sure you want to continue connnecting (yes/no)? yes
7. type yes
   (warning paermanently added github.com (IP) (RSA) to list of known hosts. 
8. Enter passphrase for key (Type the passphrase)  
   It will display
   Hi omaxxxodons! you have successfully authenticated, but github does not provide shell access.

  CREATE A REPOSITORY ON THE SERVER AND CLONE IT TO THE LOCAL REPOSITORY
  CLONNING IS CREATING A REPLICA OF A REPOSITORY IN GITHUB AND LINKING IT TO THE LOCAL REPOSITORY
  BY MAKING IT AVAILABLE ON THE LOCAL REPOSITORY.

 1. CREATE A REPO ON THE GITHUB SERVER 
    Choose initialize this repository with a README because you want to create a repository with
    some README content in it.
    click create a repository ( click clone or download)
    This time there'll be two url on it
     copy the ssh url
    use the ssh url to clone this repository from the server to local

   Navigate to the root folder that you are creating all your repositories in your local machine
2. pwd    (/c/users/omasa/foldername)
3. ls     (list repositories)
4. git clone the url of the repo that you want to clone
   (git clone git@github.com:omasa/newfile3.git)
   (if you notice there is no https, you're just cloning the ssh url)
5. Type your passphrase
6. ls -ltr (it display all the repos in the local folder including repository you just clone)
7. cd newdile3.txt (this is the file you just clone)
8. ls -ltr (total 1     -wr-r--r--1)
9. notepad newfile 4.txt       (This will add more README file)
10. git status
11. git add.
12. git commit -m  "message"
    SINCE YOU CLONE YOUR REPO FROM THE GITHUB SERVER, THE ORIGIN IS ALREADY SET
    YOU DONT NEED TO ADD ORIGIN
    WE ADDED THE UPSTREAM BRANCH FOR THE 1ST ONE BECAUSE WE'RE PUSHING FROM LOCAL TO SERVER
    WHEN YOU CLONE, YOU GET A REPLICA AND ALL REFERENCES TO YOUR REPO, YOU DONT NEED TO DO
    ANYTHING MORE THAN PUSH THE CONTENT.
13. git remote -v
14. git push origin master
    Enter passphrase